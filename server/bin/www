#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('./global');
import TimeTask from "../src/common/timed_task";

const logger = require("../src/lib/logger");
const schedule = require("node-schedule");
const app = require('../app');
const debug = require('debug')('empty:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('server is runing... Listening on ' + bind)
    if (bind.indexOf("port") > -1) {
        let uri = 'http://0.0.0.0:' + addr.port;
        console.log('> Listening at ' + uri + '\n')
    }

}

const INIT_LEDGER_INDEX = 266955;
let env = process.env.NODE_ENV || 'development';
if (_.trim(env) === 'production') {
    /**
     * 每隔10秒抓取账本交易中的账户数据
     */
    // let rule = new schedule.RecurrenceRule();
    // let times = [0, 10, 20, 30, 40, 50];
    // rule.second = times;
    // let j = schedule.scheduleJob(rule, function () {
    //     TimeTask.getAccountsRealTime();
    // });

    /**
     * 从创始区块同步到五百万高度账本
     */
    // setTimeout(function () {
    //     TimeTask.syncOneByOne(INIT_LEDGER_INDEX, 5000000).then(function () {
    //         logger.info("从创始区块同步到五百万高度账本同步完成!")
    //     }).catch(function (error) {
    //         logger.info(error);
    //     })
    // }, 10000)

    // setTimeout(function () {
    //     TimeTask.countTokenAndBalances().then(function () {
    //         logger.info('countTokenAndBalances完成!')
    //     }).catch(function (error) {
    //         logger.info(error)
    //     });
    // }, 5000)
}

/**
 * 每天凌晨7点进行代币统计，不更新账户余额
 */
function dailyCountToken() {
    schedule.scheduleJob('0 0 7 * * *', function () {
        try {
            TimeTask.countTokenRanking();
        } catch (e) {
            console.log('dailyCountToken: ', e);
        }
    })
}

// dailyCountToken();

/**
 * 每周星期天凌晨1点进行所有账户最新余额的清算，并
 * 计算代币统计
 */
function weeklyCountBalances() {
    schedule.scheduleJob('0 0 1 * * 1', function () {
        try {
            TimeTask.countTokenAndBalances();
        } catch (e) {
            console.log('weeklyCountBalances: ', e);
        }
    })
}

// weeklyCountBalances();